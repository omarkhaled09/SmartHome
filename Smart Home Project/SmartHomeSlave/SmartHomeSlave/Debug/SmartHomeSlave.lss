
SmartHomeSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001638  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ad  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bbb  00000000  00000000  00002805  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000033c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005da  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b09  00000000  00000000  00003c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00004763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 02 	call	0x4ae	; 0x4ae <main>
  64:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPin_Direction>:
	return val;
}

void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)
{
	switch(direction)
  6c:	44 23       	and	r20, r20
  6e:	19 f0       	breq	.+6      	; 0x76 <DIO_SetPin_Direction+0xa>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	c9 f1       	breq	.+114    	; 0xe6 <DIO_SetPin_Direction+0x7a>
  74:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch (port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	91 f0       	breq	.+36     	; 0x9e <DIO_SetPin_Direction+0x32>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPin_Direction+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	d9 f0       	breq	.+54     	; 0xb6 <DIO_SetPin_Direction+0x4a>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	29 f1       	breq	.+74     	; 0xce <DIO_SetPin_Direction+0x62>
  84:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPin_Direction+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPin_Direction+0x22>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
			break;
  9c:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  9e:	27 b3       	in	r18, 0x17	; 23
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPin_Direction+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPin_Direction+0x3a>
  ae:	80 95       	com	r24
  b0:	82 23       	and	r24, r18
  b2:	87 bb       	out	0x17, r24	; 23
			break;
  b4:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  b6:	24 b3       	in	r18, 0x14	; 20
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPin_Direction+0x56>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPin_Direction+0x52>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
			break;
  cc:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_SetPin_Direction+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_SetPin_Direction+0x6a>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	81 bb       	out	0x11, r24	; 17
			break;
  e4:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch (port)
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	89 f0       	breq	.+34     	; 0x10c <DIO_SetPin_Direction+0xa0>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <DIO_SetPin_Direction+0x8a>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	c9 f0       	breq	.+50     	; 0x122 <DIO_SetPin_Direction+0xb6>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	11 f1       	breq	.+68     	; 0x138 <DIO_SetPin_Direction+0xcc>
  f4:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPin_Direction+0x96>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPin_Direction+0x92>
 106:	82 2b       	or	r24, r18
 108:	8a bb       	out	0x1a, r24	; 26
			break;
 10a:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 10c:	27 b3       	in	r18, 0x17	; 23
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPin_Direction+0xac>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPin_Direction+0xa8>
 11c:	82 2b       	or	r24, r18
 11e:	87 bb       	out	0x17, r24	; 23
			break;
 120:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPin_Direction+0xc2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPin_Direction+0xbe>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
			break;
 136:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 138:	21 b3       	in	r18, 0x11	; 17
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPin_Direction+0xd8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPin_Direction+0xd4>
 148:	82 2b       	or	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t state)
{
	switch(state)
 14e:	44 23       	and	r20, r20
 150:	19 f0       	breq	.+6      	; 0x158 <DIO_SetPin_Value+0xa>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	c9 f1       	breq	.+114    	; 0x1c8 <DIO_SetPin_Value+0x7a>
 156:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch (port)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 f0       	breq	.+36     	; 0x180 <DIO_SetPin_Value+0x32>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPin_Value+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	d9 f0       	breq	.+54     	; 0x198 <DIO_SetPin_Value+0x4a>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	29 f1       	breq	.+74     	; 0x1b0 <DIO_SetPin_Value+0x62>
 166:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPin_Value+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPin_Value+0x22>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	8b bb       	out	0x1b, r24	; 27
			break;
 17e:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 180:	28 b3       	in	r18, 0x18	; 24
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPin_Value+0x3e>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPin_Value+0x3a>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	88 bb       	out	0x18, r24	; 24
			break;
 196:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 198:	25 b3       	in	r18, 0x15	; 21
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPin_Value+0x56>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPin_Value+0x52>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
			break;
 1ae:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_SetPin_Value+0x6e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_SetPin_Value+0x6a>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	82 bb       	out	0x12, r24	; 18
			break;
 1c6:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch (port)
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	89 f0       	breq	.+34     	; 0x1ee <DIO_SetPin_Value+0xa0>
 1cc:	28 f0       	brcs	.+10     	; 0x1d8 <DIO_SetPin_Value+0x8a>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	c9 f0       	breq	.+50     	; 0x204 <DIO_SetPin_Value+0xb6>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	11 f1       	breq	.+68     	; 0x21a <DIO_SetPin_Value+0xcc>
 1d6:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1d8:	2b b3       	in	r18, 0x1b	; 27
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPin_Value+0x96>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPin_Value+0x92>
 1e8:	82 2b       	or	r24, r18
 1ea:	8b bb       	out	0x1b, r24	; 27
			break;
 1ec:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPin_Value+0xac>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPin_Value+0xa8>
 1fe:	82 2b       	or	r24, r18
 200:	88 bb       	out	0x18, r24	; 24
			break;
 202:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 204:	25 b3       	in	r18, 0x15	; 21
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPin_Value+0xc2>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPin_Value+0xbe>
 214:	82 2b       	or	r24, r18
 216:	85 bb       	out	0x15, r24	; 21
			break;
 218:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 21a:	22 b3       	in	r18, 0x12	; 18
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPin_Value+0xd8>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPin_Value+0xd4>
 22a:	82 2b       	or	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <LCD_Write_Command>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
}
void LCD_Write_Command(Uint8t command)
{
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
	/*RS is logic(0) to write inside control register*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_LOW);
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
	/*Send high nibble of command*/
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
 252:	8b b3       	in	r24, 0x1b	; 27
 254:	9c 2f       	mov	r25, r28
 256:	90 7f       	andi	r25, 0xF0	; 240
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	89 2b       	or	r24, r25
 25c:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	8f e9       	ldi	r24, 0x9F	; 159
 26a:	9f e0       	ldi	r25, 0x0F	; 15
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Write_Command+0x3c>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_Write_Command+0x42>
 272:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
	/*send low nibble of command*/
	PORTA = (command << 4) | (PORTA & 0x0F);
 27e:	2b b3       	in	r18, 0x1b	; 27
 280:	30 e1       	ldi	r19, 0x10	; 16
 282:	c3 9f       	mul	r28, r19
 284:	c0 01       	movw	r24, r0
 286:	11 24       	eor	r1, r1
 288:	92 2f       	mov	r25, r18
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	89 2b       	or	r24, r25
 28e:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 29a:	8f e9       	ldi	r24, 0x9F	; 159
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_Write_Command+0x6e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_Write_Command+0x74>
 2a4:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 2b0:	8f e3       	ldi	r24, 0x3F	; 63
 2b2:	9f e1       	ldi	r25, 0x1F	; 31
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_Write_Command+0x84>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD_Write_Command+0x8a>
 2ba:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <LCD_Init>:
#include "LCD.h"

void LCD_Init(void)
{
	/*Define direction for command pins*/
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RS, LCD_OUTPUT);
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RW, LCD_OUTPUT);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_EN, LCD_OUTPUT);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
	/*Define direction for data pins*/
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN4, LCD_OUTPUT);
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	64 e0       	ldi	r22, 0x04	; 4
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN5, LCD_OUTPUT);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	65 e0       	ldi	r22, 0x05	; 5
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN6, LCD_OUTPUT);
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	66 e0       	ldi	r22, 0x06	; 6
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN7, LCD_OUTPUT);
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	67 e0       	ldi	r22, 0x07	; 7
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	81 ee       	ldi	r24, 0xE1	; 225
 30a:	94 e0       	ldi	r25, 0x04	; 4
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <LCD_Init+0x4c>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_Init+0x56>
 316:	00 00       	nop
	/*LCD controller is slower than MC speed*/
	_delay_ms(100);
	LCD_Write_Command(0x02);
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
	LCD_Write_Command(0x33);
 31e:	83 e3       	ldi	r24, 0x33	; 51
 320:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
	LCD_Write_Command(0x32);
 324:	82 e3       	ldi	r24, 0x32	; 50
 326:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
	LCD_Write_Command(0x28);
 32a:	88 e2       	ldi	r24, 0x28	; 40
 32c:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
	LCD_Write_Command(0x0C);
 330:	8c e0       	ldi	r24, 0x0C	; 12
 332:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
	LCD_Write_Command(0x01);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
	LCD_Write_Command(0x06);
 33c:	86 e0       	ldi	r24, 0x06	; 6
 33e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
 342:	8f e3       	ldi	r24, 0x3F	; 63
 344:	9c e9       	ldi	r25, 0x9C	; 156
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_Init+0x86>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_Init+0x8c>
 34c:	00 00       	nop
 34e:	08 95       	ret

00000350 <LCD_Clear>:
	_delay_ms(10);
}
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Write_Command>
 356:	08 95       	ret

00000358 <LCD_Write_Character>:
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
void LCD_Write_Character(Uint8t character)
{
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
	/*RS is logic(1) to write inside data register*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_HIGH);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
	/*Send high nibble of command*/
	PORTA = (character & 0xF0) | (PORTA & 0x0F);
 37a:	8b b3       	in	r24, 0x1b	; 27
 37c:	9c 2f       	mov	r25, r28
 37e:	90 7f       	andi	r25, 0xF0	; 240
 380:	8f 70       	andi	r24, 0x0F	; 15
 382:	89 2b       	or	r24, r25
 384:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 390:	8f e9       	ldi	r24, 0x9F	; 159
 392:	9f e0       	ldi	r25, 0x0F	; 15
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_Write_Character+0x3c>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_Write_Character+0x42>
 39a:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	63 e0       	ldi	r22, 0x03	; 3
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
	/*send low nibble of command*/
	PORTA = (character << 4) | (PORTA & 0x0F);
 3a6:	2b b3       	in	r18, 0x1b	; 27
 3a8:	30 e1       	ldi	r19, 0x10	; 16
 3aa:	c3 9f       	mul	r28, r19
 3ac:	c0 01       	movw	r24, r0
 3ae:	11 24       	eor	r1, r1
 3b0:	92 2f       	mov	r25, r18
 3b2:	9f 70       	andi	r25, 0x0F	; 15
 3b4:	89 2b       	or	r24, r25
 3b6:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 3c2:	8f e9       	ldi	r24, 0x9F	; 159
 3c4:	9f e0       	ldi	r25, 0x0F	; 15
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCD_Write_Character+0x6e>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCD_Write_Character+0x74>
 3cc:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 3d8:	8f e3       	ldi	r24, 0x3F	; 63
 3da:	9f e1       	ldi	r25, 0x1F	; 31
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_Write_Character+0x84>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_Write_Character+0x8a>
 3e2:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <LCD_Write_String>:
void LCD_Write_String(Uint8t* str)
{
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	ec 01       	movw	r28, r24
	while(*str != '\0')
 3ee:	88 81       	ld	r24, Y
 3f0:	88 23       	and	r24, r24
 3f2:	31 f0       	breq	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f4:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Write_Character(*str);
 3f6:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Write_Character>
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
void LCD_Write_String(Uint8t* str)
{
	while(*str != '\0')
 3fa:	89 91       	ld	r24, Y+
 3fc:	81 11       	cpse	r24, r1
 3fe:	fb cf       	rjmp	.-10     	; 0x3f6 <LCD_Write_String+0xe>
	{
		LCD_Write_Character(*str);
		str++;
	}
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <LCD_Write_Number>:
void LCD_Write_Number(Uint32t number)
{
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	2a 97       	sbiw	r28, 0x0a	; 10
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
	Uint8t num[10];
	ltoa(number, (Uint8t*)num, 10);
 41a:	2a e0       	ldi	r18, 0x0A	; 10
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	ae 01       	movw	r20, r28
 420:	4f 5f       	subi	r20, 0xFF	; 255
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	0e 94 9a 02 	call	0x534	; 0x534 <ltoa>
	LCD_Write_String(num);
 428:	ce 01       	movw	r24, r28
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_Write_String>
}
 430:	2a 96       	adiw	r28, 0x0a	; 10
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <LED0_Initialize>:

void LED0_Initialize(void)
{
	//SET_BIT(DDRC, PC2);//Define direction
	//DIO_SetDirection(18, DIO_PIN_OUTPUT);
	DIO_SetPin_Direction(LED0_PORT, LED0_PIN, LED_OUTPUT);//Define direction
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	62 e0       	ldi	r22, 0x02	; 2
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 44c:	08 95       	ret

0000044e <LED1_Initialize>:
}
void LED1_Initialize(void)
{
	//SET_BIT(DDRC, PC2);//Define direction
	//DIO_SetDirection(18, DIO_PIN_OUTPUT);
	DIO_SetPin_Direction(LED1_PORT, LED1_PIN, LED_OUTPUT);//Define direction
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	67 e0       	ldi	r22, 0x07	; 7
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 458:	08 95       	ret

0000045a <LED2_Initialize>:
}
void LED2_Initialize(void)
{
	//SET_BIT(DDRC, PC2);//Define direction
	//DIO_SetDirection(18, DIO_PIN_OUTPUT);
	DIO_SetPin_Direction(LED2_PORT, LED2_PIN, LED_OUTPUT);//Define direction
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	63 e0       	ldi	r22, 0x03	; 3
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 464:	08 95       	ret

00000466 <LED0_ON>:
}
void LED0_ON(void)
{
	//SET_BIT(LED0_PORT, LED0_PIN);
	//DIO_SetValue(18, LED_HIGH);
	DIO_SetPin_Value(LED0_PORT, LED0_PIN, LED_HIGH);
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 470:	08 95       	ret

00000472 <LED1_ON>:
}
void LED1_ON(void)
{
	//SET_BIT(LED0_PORT, LED0_PIN);
	//DIO_SetValue(18, LED_HIGH);
	DIO_SetPin_Value(LED1_PORT, LED1_PIN, LED_HIGH);
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	67 e0       	ldi	r22, 0x07	; 7
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 47c:	08 95       	ret

0000047e <LED2_ON>:
}
void LED2_ON(void)
{
	//SET_BIT(LED0_PORT, LED0_PIN);
	//DIO_SetValue(18, LED_HIGH);
	DIO_SetPin_Value(LED2_PORT, LED2_PIN, LED_HIGH);
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	63 e0       	ldi	r22, 0x03	; 3
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 488:	08 95       	ret

0000048a <LED0_OFF>:
}
void LED0_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0_PIN);
	//DIO_SetValue(18, LED_LOW);
	DIO_SetPin_Value(LED0_PORT, LED0_PIN, LED_LOW);
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 494:	08 95       	ret

00000496 <LED1_OFF>:
}
void LED1_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0_PIN);
	//DIO_SetValue(18, LED_LOW);
	DIO_SetPin_Value(LED1_PORT, LED1_PIN, LED_LOW);
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	67 e0       	ldi	r22, 0x07	; 7
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 4a0:	08 95       	ret

000004a2 <LED2_OFF>:
}
void LED2_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0_PIN);
	//DIO_SetValue(18, LED_LOW);
	DIO_SetPin_Value(LED2_PORT, LED2_PIN, LED_LOW);
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	63 e0       	ldi	r22, 0x03	; 3
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPin_Value>
 4ac:	08 95       	ret

000004ae <main>:
#include "SPI.h"
int main(void)
{
	/* Replace with your application code */

	LED0_Initialize();
 4ae:	0e 94 21 02 	call	0x442	; 0x442 <LED0_Initialize>
	LED1_Initialize();
 4b2:	0e 94 27 02 	call	0x44e	; 0x44e <LED1_Initialize>
	LED2_Initialize();
 4b6:	0e 94 2d 02 	call	0x45a	; 0x45a <LED2_Initialize>
	LCD_Init();
 4ba:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Init>
	SPI_Init();
 4be:	0e 94 8f 02 	call	0x51e	; 0x51e <SPI_Init>
	Uint8t Datarecieve =0;
	LCD_Write_Number(Datarecieve);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	cb 01       	movw	r24, r22
 4c8:	0e 94 03 02 	call	0x406	; 0x406 <LCD_Write_Number>
	while (1)
	{
		Datarecieve=SPI_Receive();
 4cc:	0e 94 96 02 	call	0x52c	; 0x52c <SPI_Receive>
 4d0:	c8 2f       	mov	r28, r24
		if (Datarecieve=='a')
 4d2:	81 36       	cpi	r24, 0x61	; 97
 4d4:	19 f4       	brne	.+6      	; 0x4dc <main+0x2e>
		{	
			LED0_ON();
 4d6:	0e 94 33 02 	call	0x466	; 0x466 <LED0_ON>
 4da:	18 c0       	rjmp	.+48     	; 0x50c <main+0x5e>
		}
		else if (Datarecieve=='b')
 4dc:	82 36       	cpi	r24, 0x62	; 98
 4de:	19 f4       	brne	.+6      	; 0x4e6 <main+0x38>
		{
			LED0_OFF();
 4e0:	0e 94 45 02 	call	0x48a	; 0x48a <LED0_OFF>
 4e4:	13 c0       	rjmp	.+38     	; 0x50c <main+0x5e>
		}
		else if (Datarecieve=='c')
 4e6:	83 36       	cpi	r24, 0x63	; 99
 4e8:	19 f4       	brne	.+6      	; 0x4f0 <main+0x42>
		{
			LED1_ON();
 4ea:	0e 94 39 02 	call	0x472	; 0x472 <LED1_ON>
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <main+0x5e>
		}
		else if (Datarecieve=='d')
 4f0:	84 36       	cpi	r24, 0x64	; 100
 4f2:	19 f4       	brne	.+6      	; 0x4fa <main+0x4c>
		{
			LED1_OFF();
 4f4:	0e 94 4b 02 	call	0x496	; 0x496 <LED1_OFF>
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <main+0x5e>
		}
		else if (Datarecieve=='e')
 4fa:	85 36       	cpi	r24, 0x65	; 101
 4fc:	19 f4       	brne	.+6      	; 0x504 <main+0x56>
		{
			LED2_ON();
 4fe:	0e 94 3f 02 	call	0x47e	; 0x47e <LED2_ON>
 502:	04 c0       	rjmp	.+8      	; 0x50c <main+0x5e>
		}
		else if (Datarecieve=='f')
 504:	86 36       	cpi	r24, 0x66	; 102
 506:	11 f4       	brne	.+4      	; 0x50c <main+0x5e>
		{
			LED2_OFF();
 508:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED2_OFF>
		}
		LCD_Clear();
 50c:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Clear>
		LCD_Write_Number(Datarecieve);
 510:	6c 2f       	mov	r22, r28
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 03 02 	call	0x406	; 0x406 <LCD_Write_Number>
		
	}
 51c:	d7 cf       	rjmp	.-82     	; 0x4cc <main+0x1e>

0000051e <SPI_Init>:
}
void SPI_Transmit(Uint8t data)
{
	SPDR = data;
	while (GET_BIT(SPSR, SPIF) != 1);
}
 51e:	bd 98       	cbi	0x17, 5	; 23
 520:	be 9a       	sbi	0x17, 6	; 23
 522:	bf 98       	cbi	0x17, 7	; 23
 524:	bc 98       	cbi	0x17, 4	; 23
 526:	83 e4       	ldi	r24, 0x43	; 67
 528:	8d b9       	out	0x0d, r24	; 13
 52a:	08 95       	ret

0000052c <SPI_Receive>:
Uint8t SPI_Receive(void)
{
	while (GET_BIT(SPSR, SPIF) != 1);
 52c:	77 9b       	sbis	0x0e, 7	; 14
 52e:	fe cf       	rjmp	.-4      	; 0x52c <SPI_Receive>
	return SPDR;
 530:	8f b1       	in	r24, 0x0f	; 15
}
 532:	08 95       	ret

00000534 <ltoa>:
 534:	25 32       	cpi	r18, 0x25	; 37
 536:	31 05       	cpc	r19, r1
 538:	20 f4       	brcc	.+8      	; 0x542 <ltoa+0xe>
 53a:	22 30       	cpi	r18, 0x02	; 2
 53c:	10 f0       	brcs	.+4      	; 0x542 <ltoa+0xe>
 53e:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__ltoa_ncheck>
 542:	fa 01       	movw	r30, r20
 544:	10 82       	st	Z, r1
 546:	ca 01       	movw	r24, r20
 548:	08 95       	ret

0000054a <__ltoa_ncheck>:
 54a:	bb 27       	eor	r27, r27
 54c:	2a 30       	cpi	r18, 0x0A	; 10
 54e:	51 f4       	brne	.+20     	; 0x564 <__ltoa_ncheck+0x1a>
 550:	99 23       	and	r25, r25
 552:	42 f4       	brpl	.+16     	; 0x564 <__ltoa_ncheck+0x1a>
 554:	bd e2       	ldi	r27, 0x2D	; 45
 556:	90 95       	com	r25
 558:	80 95       	com	r24
 55a:	70 95       	com	r23
 55c:	61 95       	neg	r22
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	8f 4f       	sbci	r24, 0xFF	; 255
 562:	9f 4f       	sbci	r25, 0xFF	; 255
 564:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__ultoa_common>

00000568 <__ultoa_ncheck>:
 568:	bb 27       	eor	r27, r27

0000056a <__ultoa_common>:
 56a:	fa 01       	movw	r30, r20
 56c:	a6 2f       	mov	r26, r22
 56e:	62 17       	cp	r22, r18
 570:	71 05       	cpc	r23, r1
 572:	81 05       	cpc	r24, r1
 574:	91 05       	cpc	r25, r1
 576:	33 0b       	sbc	r19, r19
 578:	30 fb       	bst	r19, 0
 57a:	66 f0       	brts	.+24     	; 0x594 <__ultoa_common+0x2a>
 57c:	aa 27       	eor	r26, r26
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	88 1f       	adc	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	aa 1f       	adc	r26, r26
 588:	a2 17       	cp	r26, r18
 58a:	10 f0       	brcs	.+4      	; 0x590 <__ultoa_common+0x26>
 58c:	a2 1b       	sub	r26, r18
 58e:	63 95       	inc	r22
 590:	38 50       	subi	r19, 0x08	; 8
 592:	a9 f7       	brne	.-22     	; 0x57e <__ultoa_common+0x14>
 594:	a0 5d       	subi	r26, 0xD0	; 208
 596:	aa 33       	cpi	r26, 0x3A	; 58
 598:	08 f0       	brcs	.+2      	; 0x59c <__ultoa_common+0x32>
 59a:	a9 5d       	subi	r26, 0xD9	; 217
 59c:	a1 93       	st	Z+, r26
 59e:	36 f7       	brtc	.-52     	; 0x56c <__ultoa_common+0x2>
 5a0:	b1 11       	cpse	r27, r1
 5a2:	b1 93       	st	Z+, r27
 5a4:	10 82       	st	Z, r1
 5a6:	ca 01       	movw	r24, r20
 5a8:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <strrev>

000005ac <strrev>:
 5ac:	dc 01       	movw	r26, r24
 5ae:	fc 01       	movw	r30, r24
 5b0:	67 2f       	mov	r22, r23
 5b2:	71 91       	ld	r23, Z+
 5b4:	77 23       	and	r23, r23
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <strrev+0x4>
 5b8:	32 97       	sbiw	r30, 0x02	; 2
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <strrev+0x18>
 5bc:	7c 91       	ld	r23, X
 5be:	6d 93       	st	X+, r22
 5c0:	70 83       	st	Z, r23
 5c2:	62 91       	ld	r22, -Z
 5c4:	ae 17       	cp	r26, r30
 5c6:	bf 07       	cpc	r27, r31
 5c8:	c8 f3       	brcs	.-14     	; 0x5bc <strrev+0x10>
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
